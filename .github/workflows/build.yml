name: build-test-and-release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for MinVer to work properly

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore packages
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests with coverage
        run: |
          dotnet test ClutterFlock.Tests/ClutterFlock.Tests.csproj -c Release --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/coverage /p:Include="[ClutterFlock]*"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ClutterFlock.Tests/TestResults/*.trx

      - name: Upload code coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-coverage
          path: ClutterFlock.Tests/TestResults/coverage.cobertura.xml

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.3
        if: always()
        with:
          reports: ClutterFlock.Tests/TestResults/coverage.cobertura.xml
          targetdir: coverage-report
          reporttypes: Html;Badges
          verbosity: Info

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage-report/

      - name: Comment coverage on PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: coverage-report/SummaryGithub.md

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ClutterFlock.Tests/TestResults/coverage.cobertura.xml
          flags: unittests
          name: ClutterFlock-coverage
          fail_ci_if_error: false
          verbose: true

      - name: Coverage threshold check
        shell: pwsh
        if: always()
        run: |
          $coverageFile = "ClutterFlock.Tests/TestResults/coverage.cobertura.xml"
          if (Test-Path $coverageFile) {
            [xml]$coverage = Get-Content $coverageFile
            $lineCoverage = [double]$coverage.coverage.'line-rate' * 100
            Write-Host "üìä Current line coverage: $($lineCoverage.ToString('F2'))%" -ForegroundColor Green
            
            # Set minimum coverage threshold (adjust as needed)
            $minCoverage = 10.0
            if ($lineCoverage -lt $minCoverage) {
              Write-Host "‚ö†Ô∏è  Coverage $($lineCoverage.ToString('F2'))% is below threshold $minCoverage%" -ForegroundColor Yellow
              # Uncomment next line to fail build on low coverage:
              # exit 1
            } else {
              Write-Host "‚úÖ Coverage meets minimum threshold" -ForegroundColor Green
            }
          } else {
            Write-Host "‚ùå Coverage file not found" -ForegroundColor Red
          }

      - name: Publish application
        run: |
          dotnet publish ClutterFlock.csproj -c Release -r win-x64 --self-contained true /p:PublishSingleFile=true

      - name: Install Inno Setup
        run: |
          # Use chocolatey to install Inno Setup - more reliable in CI
          choco install innosetup -y
          
      - name: Create Windows Installer
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Find Inno Setup (chocolatey installs to different path)
          $possiblePaths = @(
            "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe",
            "${env:ProgramFiles}\Inno Setup 6\ISCC.exe",
            "C:\ProgramData\chocolatey\lib\innosetup\tools\ISCC.exe"
          )
          
          $innoPath = $null
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $innoPath = $path
              break
            }
          }
          
          if (-not $innoPath) {
            throw "Inno Setup not found in any expected location"
          }
          
          Write-Host "Found Inno Setup at: $innoPath"
          
          # Copy published files to installer directory
          $publishDir = "bin/Release/net9.0-windows10.0.26100.0/win-x64/publish"
          $installerDir = "installer/files"
          
          if (Test-Path $installerDir) { Remove-Item $installerDir -Recurse -Force }
          New-Item -ItemType Directory -Force -Path $installerDir | Out-Null
          Copy-Item "$publishDir/*" -Destination $installerDir -Recurse
          
          # Build installer from the files directory
          Push-Location $installerDir
          try {
            & $innoPath "../setup.iss"
            if ($LASTEXITCODE -ne 0) {
              throw "Inno Setup failed with exit code $LASTEXITCODE"
            }
          } finally {
            Pop-Location
          }
          
          # Verify installer was created
          if (-not (Test-Path "installer/output/ClutterFlock-Setup.exe")) {
            throw "Installer was not created"
          }
          
          Write-Host "‚úÖ Installer created successfully"

      - name: Prepare release artifacts
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Create output directory
          New-Item -ItemType Directory -Force -Path out | Out-Null
          
          # Copy installer
          if (Test-Path "installer/output/ClutterFlock-Setup.exe") {
            Copy-Item "installer/output/ClutterFlock-Setup.exe" "out/ClutterFlock-Setup.exe"
            Write-Host "‚úÖ Installer copied to out/"
          }
          
          # Create ZIP for portable version
          $publishDir = "bin/Release/net9.0-windows10.0.26100.0/win-x64/publish"
          if (Test-Path $publishDir) {
            $zipPath = "out/ClutterFlock-Portable-win-x64.zip"
            if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
            Compress-Archive -Path "$publishDir/*" -DestinationPath $zipPath
            Write-Host "‚úÖ Portable ZIP created: $zipPath"
          }

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: ClutterFlock-Installer
          path: out/ClutterFlock-Setup.exe
          if-no-files-found: error

      - name: Upload portable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ClutterFlock-Portable
          path: out/ClutterFlock-Portable-win-x64.zip
          if-no-files-found: error

  release:
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    steps:
      - name: Download installer artifact
        uses: actions/download-artifact@v4
        with:
          name: ClutterFlock-Installer
          path: out

      - name: Download portable artifact
        uses: actions/download-artifact@v4
        with:
          name: ClutterFlock-Portable
          path: out

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            out/ClutterFlock-Setup.exe
            out/ClutterFlock-Portable-win-x64.zip
          body: |
            ## ClutterFlock ${{ github.ref_name }}
            
            ### Installation Options
            
            **üöÄ Recommended: Windows Installer**
            - Download `ClutterFlock-Setup.exe` for easy installation
            - Automatically creates start menu shortcuts
            - Includes uninstaller
            - Requires Windows 10/11 x64
            
            **üìÅ Portable Version**
            - Download `ClutterFlock-Portable-win-x64.zip` for portable use
            - No installation required
            - Extract and run `ClutterFlock.exe`
            - Perfect for USB drives or temporary use
            
            ### What's New
            - See the [changelog](https://github.com/Borschtsch/ClutterFlock/releases) for details
            
            ### System Requirements
            - Windows 10 version 1809 or later (x64)
            - .NET 9 Runtime (included in installer)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
